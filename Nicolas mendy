<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Manager</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #e9ecef;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            width: 350px;
            transition: all 0.3s ease;
        }
        h2 {
            text-align: center;
            color: #343a40;
            margin-bottom: 20px;
        }
        input[type="text"], input[type="password"] {
            width: 100%;
            padding: 12px;
            margin: 10px 0;
            border: 1px solid #ced4da;
            border-radius: 5px;
            font-size: 14px;
        }
        button {
            width: 100%;
            padding: 12px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }
        button:hover {
            background-color: #0056b3;
        }
        .hidden {
            display: none;
        }
        .password-list {
            margin-top: 20px;
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid #ced4da;
            border-radius: 5px;
            padding: 10px;
            background-color: #f8f9fa;
        }
        .password-item {
            display: flex;
            justify-content: space-between;
            padding: 5px 0;
            border-bottom: 1px solid #dee2e6;
        }
        .password-item:last-child {
            border-bottom: none;
        }
        .password-item span {
            color: #495057;
        }
        .password-item button {
            background-color: #dc3545;
        }
        .password-item button:hover {
            background-color: #c82333;
        }
        #login-error {
            color: red;
            text-align: center;
        
        }
        :root {
    --bg-color: #ffffff;
    --text-color: #000000;
}

[data-theme="dark"] {
    --bg-color: #000000;
    --text-color: #ffffff;
}

body {
    background-color: var(--bg-color);
    color: var(--text-color);
}
    </style>
</head>
<body>
    <div class="theme-toggle" id="theme-toggle" onclick="toggleTheme()">
        üåô
    </div>

<div class="container" id="login-container">
    <h2>Password Manager Login</h2>
    <input type="text" id="email" placeholder="Email" required>
    <input type="password" id="password" placeholder="Password" required>
    <button onclick="login()">Login</button>
    <p id="login-error"></p>
    <button onclick="showRegistration()">Register</button>
</div>

<div class="container hidden" id="registration-container">
    <h2>Register</h2>
    <input type="text" id="reg-email" placeholder="Email" required>
    <input type="password" id="reg-password" placeholder="Password" required>
    <button onclick="register()">Register</button>
    <p id="reg-error"></p>
    <button onclick="showLogin()">Back to Login</button>
</div>

<div class="container hidden" id="password-manager-container">
    <h2>Password Manager</h2>
    <input type="text" id="website" placeholder="Website Name" required>
    <input type="text" id="user-email" placeholder="User  Email" required>
    <button onclick="generatePassword()">Generate Password</button>
    <input type="text" id="generated-password" readonly>
    <button onclick="copyPassword()">Copy Password</button>
    <button onclick="savePassword()">Save Password</button>

    <h3>Saved Passwords</h3>
    <div class="password-list" id="password-list"></div>
</div>

<script>
    function toggleTheme() {
    const currentTheme = localStorage.getItem("theme");
    const newTheme = currentTheme === "dark" ? "light" : "dark";
    
    document.documentElement.setAttribute("data-theme", newTheme);
    localStorage.setItem("theme", newTheme);
    
    // Update the toggle button icon
    document.getElementById("theme-toggle").innerText = newTheme === "dark" ? "üåô" : "‚òÄÔ∏è";
}

// Check for saved theme on page load
window.onload = () => {
    const savedTheme = localStorage.getItem("theme") || "light";
    document.documentElement.setAttribute("data-theme", savedTheme);
    document.getElementById("theme-toggle").innerText = savedTheme === "dark" ? "üåô" : "‚òÄÔ∏è";
};
    let encryptionKey;

    async function generateKey() {
        encryptionKey = await window.crypto.subtle.generateKey(
            {
                name: "AES-GCM",
                length: 256,
            },
            true,
            ["encrypt", " decrypt"]
        );
    }

    async function encryptData(data) {
        const iv = window.crypto.getRandomValues(new Uint8Array(12));
        const encodedData = new TextEncoder().encode(data);
        const encryptedData = await window.crypto.subtle.encrypt(
            {
                name: "AES-GCM",
                iv: iv,
            },
            encryptionKey,
            encodedData
        );
        return { iv: Array.from(iv), data: Array.from(new Uint8Array(encryptedData)) };
    }

    async function decryptData(encrypted) {
        const iv = new Uint8Array(encrypted.iv);
        const data = new Uint8Array(encrypted.data);
        const decryptedData = await window.crypto.subtle.decrypt(
            {
                name: "AES-GCM",
                iv: iv,
            },
            encryptionKey,
            data
        );
        return new TextDecoder().decode(decryptedData);
    }

    async function savePassword() {
        const website = document.getElementById('website').value;
        const userEmail = document.getElementById('user-email').value;
        const password = document.getElementById('generated-password').value;

        const encryptedPassword = await encryptData(password);
        const savedPasswords = JSON.parse(localStorage.getItem('passwords')) || {};
        savedPasswords[website] = { email: userEmail, password: encryptedPassword };
        localStorage.setItem('passwords', JSON.stringify(savedPasswords));
        displayPasswords();
    }

    function displayPasswords() {
        const passwordList = document.getElementById('password-list');
        passwordList.innerHTML = '';
        const savedPasswords = JSON.parse(localStorage.getItem('passwords')) || {};

        for (const website in savedPasswords) {
            const item = document.createElement('div');
            item.className = 'password-item';
            item.innerHTML = `<span>${website} - ${savedPasswords[website].email}</span>
                              <button onclick="deletePassword('${website}')">Delete</button>`;
            passwordList.appendChild(item);
        }
    }

    function deletePassword(website) {
        const savedPasswords = JSON.parse(localStorage.getItem('passwords'));
        delete savedPasswords[website];
        localStorage.setItem('passwords', JSON.stringify(savedPasswords));
        displayPasswords();
    }

    function copyPassword() {
        const passwordField = document.getElementById('generated-password');
        passwordField.select();
        document.execCommand('copy');
    }

    function generatePassword() {
        const length = 12;
        const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+";
        let password = "";
        for (let i = 0; i < length; i++) {
            const randomIndex = Math.floor(Math.random() * charset.length);
            password += charset[randomIndex];
        }
        document.getElementById('generated-password').value = password;
    }

    function showRegistration() {
        document.getElementById('login-container').classList.add('hidden');
        document.getElementById('registration-container').classList.remove('hidden');
    }

    function showLogin() {
        document.getElementById('registration-container').classList.add('hidden');
        document.getElementById('login-container').classList.remove('hidden');
    }

    function register() {
        const email = document.getElementById('reg-email').value;
        const password = document.getElementById('reg-password').value;
        const users = JSON.parse(localStorage.getItem('users')) || {};

        if (email && password) {
            users[email] = password;
            localStorage.setItem('users', JSON.stringify(users));
            showLogin();
        } else {
            document.getElementById('reg-error').innerText = "Please enter a valid email and password.";
        }
    }

    function login() {
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const users = JSON.parse(localStorage.getItem('users')) || {};

        if (email && password) {
            if (users[email] === password) {
                document.getElementById('login-container').classList.add('hidden');
                document.getElementById('password-manager-container').classList.remove('hidden');
                generateKey();
                displayPasswords();
            } else {
                document.getElementById('login-error').innerText = "Invalid email or password.";
            }
        } else {
            document.getElementById('login-error').innerText = "Please enter both email and password.";
        }
    }
</script>
</body>
</html>
